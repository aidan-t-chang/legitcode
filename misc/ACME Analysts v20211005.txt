1. Passing Coded Messages
=========================
ACME Inc employees like to pass coded messages. To avoid detection, you need to combine sets of digits 0-9 to create the numbers in the code. The signal that a number is part of the code is that it is divisible by 3. You can do smaller numbers like 15 and 45 easily, but bigger numbers like 144 and 414 are a little trickier. Write a program to help yourself quickly create large numbers for use in the code, given a limited number of digits to work with.

You have L, a list containing some digits (0 to 9). Write a function solution(L) which finds the largest number that can be made from some or all of these digits and is divisible by 3. If it is not possible to make such a number, return 0 as the solution. L will contain anywhere from 1 to 9 digits.  The same digit may appear multiple times in the list, but each element in the list may only be used once.

Test Case 1:
Input:  solution([3, 1, 4, 1]) 
Output: 4311

Test Case 2:
Input:  solution([3, 1, 4, 1, 5, 9]) 
Output: 94311


2. Avoid Getting Voluntold!
===========================
ACME Inc CEO has installed new flooring outside analysts' cubicles. It looks like a chessboard, and every morning analysts are told to solve a new movement puzzle in order to cross the floor. That would be fine if you got to be the rook or the queen, but instead, you have to be the knight! Worse, if you take too much time solving the puzzle, you get "voluntold" onto undesirable projects.

To help yourself get to your cubicle every day, write a function called solution(src, dest) which takes in two parameters: the source square, on which you start, and the destination square, which is where you need to land to solve the puzzle. The function should return an integer representing the smallest number of moves it will take for you to travel from the source square to the destination square using a chess knight's moves (that is, two squares in any direction immediately followed by one square perpendicular to that direction, or vice versa, in an "L" shape). Both the source and destination squares will be an integer between 0 and 63, inclusive, and are numbered like the example chessboard below:

-------------------------
| 0| 1| 2| 3| 4| 5| 6| 7|
-------------------------
| 8| 9|10|11|12|13|14|15|
-------------------------
|16|17|18|19|20|21|22|23|
-------------------------
|24|25|26|27|28|29|30|31|
-------------------------
|32|33|34|35|36|37|38|39|
-------------------------
|40|41|42|43|44|45|46|47|
-------------------------
|48|49|50|51|52|53|54|55|
-------------------------
|56|57|58|59|60|61|62|63|
-------------------------

Test Case 1:
Inputs:
(int) src = 19
(int) dest = 36
Output:
(int) 1

Test Case 2:
Inputs:
(int) src = 0
(int) dest = 1
Output:
(int) 3


3. Prepare for Friday Happy Hour
================================

Your hard work is noticed!  You are now in charge of remodeling the hallways and arranging for layout of cubicle walls for the entire office.  You get the feeling that designing for the fastest route to the main office exit and onto happy hour is your goal.

You have maps of parts of the office, each starting at a cubicle exit and ending at the main office exit.  The map is represented as matrix of 0s and 1s, where 0s are passable space and 1s are impassable walls.  All of the analysts are located in the cubicle located at the top left (0,0) and the main office exit is located at the bottom right (w-1,h-1).

Write a function solution(map) that generates the length of the shortest path from the analysts' cubicle to the main office exit, where you are allowed to remove one wall as part of your remodeling plans. The path length is the total number of nodes you pass through, counting both the entrance and exit nodes. The starting and ending positions are always passable (0). The map will always be solvable, though you may or may not need to remove a wall. The height and width of the map can be from 2 to 20. Moves can only be made in cardinal directions; no diagonal moves are allowed.

Test cases
==========
Your code should pass the following test cases.
Note that it may also be run against hidden test cases not shown here.

Input:
solution([[0, 1, 1, 0], [0, 0, 0, 1], [1, 1, 0, 0], [1, 1, 1, 0]])
Output:
    7

Input:
solution([[0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 0], [0, 0, 0, 0, 0, 0], [0, 1, 1, 1, 1, 1], [0, 1, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0]])
Output:
    11
